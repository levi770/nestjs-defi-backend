/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Donation = ContractEventLog<{
  _from: string;
  _value: string;
  _currency: string;
  _to: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OrganizationCreated = ContractEventLog<{
  organizationOwner: string;
  organization: string;
  count: string;
  0: string;
  1: string;
  2: string;
}>;
export type Withdraw = ContractEventLog<{
  _to: string;
  _value: string;
  _currency: string;
  _from: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface ICharityFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ICharityFactory;
  clone(): ICharityFactory;
  methods: {
    charityToken(): NonPayableTransactionObject<string>;

    getOrganization(arg0: string): NonPayableTransactionObject<string>;

    organizationEthBalance(arg0: string): NonPayableTransactionObject<string>;

    organizationTokenBalance(arg0: string): NonPayableTransactionObject<string>;

    allOrganizations(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    allOrganizationsLength(): NonPayableTransactionObject<string>;

    totalEthDonations(): NonPayableTransactionObject<string>;

    totalTokenDonations(): NonPayableTransactionObject<string>;

    createOrganization(
      owner: string,
      name: string,
      desc: string
    ): NonPayableTransactionObject<string>;
  };
  events: {
    Donation(cb?: Callback<Donation>): EventEmitter;
    Donation(options?: EventOptions, cb?: Callback<Donation>): EventEmitter;

    OrganizationCreated(cb?: Callback<OrganizationCreated>): EventEmitter;
    OrganizationCreated(
      options?: EventOptions,
      cb?: Callback<OrganizationCreated>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Donation", cb: Callback<Donation>): void;
  once(event: "Donation", options: EventOptions, cb: Callback<Donation>): void;

  once(event: "OrganizationCreated", cb: Callback<OrganizationCreated>): void;
  once(
    event: "OrganizationCreated",
    options: EventOptions,
    cb: Callback<OrganizationCreated>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
