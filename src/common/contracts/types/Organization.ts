/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Donation = ContractEventLog<{
  _from: string;
  _value: string;
  _currency: string;
  _to: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Withdraw = ContractEventLog<{
  _to: string;
  _value: string;
  _currency: string;
  _from: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface Organization extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Organization;
  clone(): Organization;
  methods: {
    charityToken(): NonPayableTransactionObject<string>;

    description(): NonPayableTransactionObject<string>;

    factory(): NonPayableTransactionObject<string>;

    name(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    totalEthDonations(): NonPayableTransactionObject<string>;

    totalTokenDonations(): NonPayableTransactionObject<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    donateTokens(
      _symbol: string,
      _amount: number | string | BN
    ): PayableTransactionObject<void>;

    withdrawEth(_amount: number | string | BN): PayableTransactionObject<void>;

    withdrawTokens(
      _symbol: string,
      _amount: number | string | BN
    ): PayableTransactionObject<void>;

    ethBalance(): NonPayableTransactionObject<string>;

    tokensBalance(_symbol: string): NonPayableTransactionObject<string>;
  };
  events: {
    Donation(cb?: Callback<Donation>): EventEmitter;
    Donation(options?: EventOptions, cb?: Callback<Donation>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Donation", cb: Callback<Donation>): void;
  once(event: "Donation", options: EventOptions, cb: Callback<Donation>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
