/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type MinTokensBeforeSwapUpdated = ContractEventLog<{
  minTokensBeforeSwap: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type SwapEnabledUpdated = ContractEventLog<{
  enabled: boolean;
  0: boolean;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;

export interface CharityToken extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CharityToken;
  clone(): CharityToken;
  methods: {
    _charityFactory(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    swapEnabled(): NonPayableTransactionObject<boolean>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    uniswapV2Pair(): NonPayableTransactionObject<string>;

    uniswapV2Router(): NonPayableTransactionObject<string>;

    name(): NonPayableTransactionObject<string>;

    symbol(): NonPayableTransactionObject<string>;

    decimals(): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    rate(): NonPayableTransactionObject<string>;

    balanceOf(account: string): NonPayableTransactionObject<string>;

    transfer(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    allowance(
      owner_: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    approve(
      spender: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    isExcluded(account: string): NonPayableTransactionObject<boolean>;

    totalFees(): NonPayableTransactionObject<string>;

    deliver(tAmount: number | string | BN): NonPayableTransactionObject<void>;

    reflectionFromToken(
      tAmount: number | string | BN,
      deductTransferFee: boolean
    ): NonPayableTransactionObject<string>;

    tokenFromReflection(
      rAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    excludeAccount(account: string): NonPayableTransactionObject<void>;

    includeAccount(account: string): NonPayableTransactionObject<void>;

    isExcludedFromFee(account: string): NonPayableTransactionObject<boolean>;

    manualSwap(): NonPayableTransactionObject<void>;

    manualSend(): NonPayableTransactionObject<void>;

    burnTokens(
      percentage: number | string | BN
    ): NonPayableTransactionObject<void>;

    _getETHBalance(): NonPayableTransactionObject<string>;

    _setTaxFee(taxFee: number | string | BN): NonPayableTransactionObject<void>;

    _setCharityFee(
      charityFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    _setCharityWallet(
      charityWalletAddress: string
    ): NonPayableTransactionObject<void>;

    _setMaxTxAmount(
      maxTxAmount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    MinTokensBeforeSwapUpdated(
      cb?: Callback<MinTokensBeforeSwapUpdated>
    ): EventEmitter;
    MinTokensBeforeSwapUpdated(
      options?: EventOptions,
      cb?: Callback<MinTokensBeforeSwapUpdated>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    SwapEnabledUpdated(cb?: Callback<SwapEnabledUpdated>): EventEmitter;
    SwapEnabledUpdated(
      options?: EventOptions,
      cb?: Callback<SwapEnabledUpdated>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(
    event: "MinTokensBeforeSwapUpdated",
    cb: Callback<MinTokensBeforeSwapUpdated>
  ): void;
  once(
    event: "MinTokensBeforeSwapUpdated",
    options: EventOptions,
    cb: Callback<MinTokensBeforeSwapUpdated>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "SwapEnabledUpdated", cb: Callback<SwapEnabledUpdated>): void;
  once(
    event: "SwapEnabledUpdated",
    options: EventOptions,
    cb: Callback<SwapEnabledUpdated>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
